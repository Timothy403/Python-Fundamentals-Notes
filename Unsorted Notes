### notes that will be sorted in the future

 I will go back to my other notes and try to make them more concise, this file can store my messy thought/learning process.

### Revise     KATA Sum of two lowest positive integers 

 str/int/list, how to change one into the other -

 import heapq (instead of using sort) - O(n) instead of O(n log n), small1, small2 = heapq.nsmallest(k, iterable)   Can also use a key such as (2, iterable, key=len)   default = ascending order

 simultaneous (parallel) assignment - pythonic way to swap without a temp, loop with enumerate, return functions and update two related variables atomically. 

#############################################################################################################################################################################################################################################
(return "odd" if sum(arr) % 2 else "even") - This works because 0 is "falsy" and any other integer is naturally "truthy, so if truthy it must not be divisible by 2 therefore it is odd

If you want to strip all whitespace in a string (\t, \n, etc.), use split()+join() as return "".join(s.split())

 bitwise ops:  return number * 9 if (number & 1) else number * 8    -    is slightly faster for the cpu to process than    -   return number * 9 if number % 2 else number * 8

any comparison operator ( >, <, ==, != ) returns a boolean value so "True" and *if* are not needed in this example, return True if bullets >= dragons * 2 else False

thinking about time complexity, comparing different solutions based on their readability and time complexity

no need to write [0:2], you can just write [:2]

for loop can have a step: for i in range(0, 100, 10) goes up to 100 by increments of 10 instead of the default 1 and ends up at 90 not 100, you can also do negative steps (10, 0, -1)          start:stop:step
or if you want to reverse the range you can also do: for i in reversed(range(10, 21))

in loops, remember you can use       +=      instead of needing to write out      storage = storage + x

make loops readable,  make the temporary variable          x:integer  d:digit   c:character    i:index

###################################


































